// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

const (
	Bearer_authScopes = "bearer_auth.Scopes"
)

// Defines values for ApiSendContentSendContentRequestDeliveryCertificate.
const (
	ApiSendContentSendContentRequestDeliveryCertificateAes  ApiSendContentSendContentRequestDeliveryCertificate = "aes"
	ApiSendContentSendContentRequestDeliveryCertificateNone ApiSendContentSendContentRequestDeliveryCertificate = "none"
)

// Defines values for ApiSendContentSendContentRequestType.
const (
	Contract ApiSendContentSendContentRequestType = "contract"
	Invoice  ApiSendContentSendContentRequestType = "invoice"
	Letter   ApiSendContentSendContentRequestType = "letter"
)

// Defines values for ApiSendContentSignatureInfoRequestingSignerSigner.
const (
	Receiver ApiSendContentSignatureInfoRequestingSignerSigner = "receiver"
	Sender   ApiSendContentSignatureInfoRequestingSignerSigner = "sender"
)

// Defines values for ContentGetDeliveryCertificateResponseMetaType.
const (
	ContentGetDeliveryCertificateResponseMetaTypeAes ContentGetDeliveryCertificateResponseMetaType = "aes"
)

// Defines values for MetaReceiverState.
const (
	MetaReceiverStateArchived    MetaReceiverState = "archived"
	MetaReceiverStateDeleted     MetaReceiverState = "deleted"
	MetaReceiverStatePending     MetaReceiverState = "pending"
	MetaReceiverStateRead        MetaReceiverState = "read"
	MetaReceiverStateRegistering MetaReceiverState = "registering"
	MetaReceiverStateTrashed     MetaReceiverState = "trashed"
	MetaReceiverStateUnread      MetaReceiverState = "unread"
)

// Defines values for MetaSenderState.
const (
	MetaSenderStateActive   MetaSenderState = "active"
	MetaSenderStateArchived MetaSenderState = "archived"
	MetaSenderStateDeleted  MetaSenderState = "deleted"
	MetaSenderStatePending  MetaSenderState = "pending"
	MetaSenderStateTrashed  MetaSenderState = "trashed"
)

// Defines values for WebApiControllerSignatureControllerExportSignatureParamsFormat.
const (
	Xml WebApiControllerSignatureControllerExportSignatureParamsFormat = "xml"
)

// ApiSendContentContentRequest defines model for ApiSendContentContentRequest.
type ApiSendContentContentRequest struct {
	// Content Content
	Content *string `json:"content,omitempty"`

	// Type Type
	Type *string `json:"type,omitempty"`
}

// ApiSendContentPaymentDetails defines model for ApiSendContentPaymentDetails.
type ApiSendContentPaymentDetails struct {
	// Amount Amount
	Amount *float32 `json:"amount,omitempty"`

	// Currency Currency
	Currency *string `json:"currency,omitempty"`

	// Description Description
	Description *string `json:"description,omitempty"`

	// DueDate Due Date
	DueDate *string `json:"due_date,omitempty"`

	// Iban IBAN
	Iban *string `json:"iban,omitempty"`

	// Reference Reference
	Reference *string `json:"reference,omitempty"`
}

// ApiSendContentPaymentInfo defines model for ApiSendContentPaymentInfo.
type ApiSendContentPaymentInfo struct {
	Details *ApiSendContentPaymentDetails `json:"details,omitempty"`

	// Payable Payable
	Payable *bool `json:"payable,omitempty"`
}

// ApiSendContentReceiverBirthInformation defines model for ApiSendContentReceiverBirthInformation.
type ApiSendContentReceiverBirthInformation struct {
	// BirthName Birth Name
	BirthName *string `json:"birth_name,omitempty"`

	// DateOfBirth Date of Birth
	DateOfBirth *string `json:"date_of_birth,omitempty"`

	// GivenNames Given Name(s)
	GivenNames *string `json:"given_names,omitempty"`

	// LastName Last Name
	LastName *string `json:"last_name,omitempty"`

	// Nationality Nationality
	Nationality *string `json:"nationality,omitempty"`

	// PlaceOfBirth Place of Birth
	PlaceOfBirth *string `json:"place_of_birth,omitempty"`
}

// ApiSendContentReceiverRequest defines model for ApiSendContentReceiverRequest.
type ApiSendContentReceiverRequest struct {
	// AccountId Account ID
	AccountId        *string                                 `json:"account_id,omitempty"`
	BirthInformation *ApiSendContentReceiverBirthInformation `json:"birth_information,omitempty"`

	// DateOfBirth Date of Birth
	DateOfBirth *string `json:"date_of_birth,omitempty"`

	// Email Email Address
	Email *string `json:"email,omitempty"`

	// FirstName First Name
	FirstName *string `json:"first_name,omitempty"`

	// FullName Full Name
	FullName *string `json:"full_name,omitempty"`

	// LastName Last Name
	LastName *string `json:"last_name,omitempty"`

	// Ssn Social Security Number
	Ssn *string `json:"ssn,omitempty"`

	// Tel Phone Number
	Tel *string `json:"tel,omitempty"`

	// VatId VAT ID
	VatId *string `json:"vat_id,omitempty"`
}

// ApiSendContentSendContentRequest defines model for ApiSendContentSendContentRequest.
type ApiSendContentSendContentRequest struct {
	// Body Content
	Body *[]ApiSendContentContentRequest `json:"body,omitempty"`

	// DeliveryCertificate Send Delivery Certificate, none - no delivery certificate, aes - Advanced Electronic Seal
	DeliveryCertificate *ApiSendContentSendContentRequestDeliveryCertificate `json:"delivery_certificate,omitempty"`
	PaymentInfo         *ApiSendContentPaymentInfo                           `json:"payment_info,omitempty"`
	SignatureInfo       *ApiSendContentSignatureInfo                         `json:"signature_info,omitempty"`

	// Subject Subject
	Subject *string                        `json:"subject,omitempty"`
	To      *ApiSendContentReceiverRequest `json:"to,omitempty"`

	// Type The type of the mail, it enables content specific actions.
	Type *ApiSendContentSendContentRequestType `json:"type,omitempty"`
}

// ApiSendContentSendContentRequestDeliveryCertificate Send Delivery Certificate, none - no delivery certificate, aes - Advanced Electronic Seal
type ApiSendContentSendContentRequestDeliveryCertificate string

// ApiSendContentSendContentRequestType The type of the mail, it enables content specific actions.
type ApiSendContentSendContentRequestType string

// ApiSendContentSignatureInfo defines model for ApiSendContentSignatureInfo.
type ApiSendContentSignatureInfo struct {
	// RequestingSigner Requesting Signer
	RequestingSigner *[]struct {
		// Field Field
		Field *string `json:"field,omitempty"`

		// Signer Which party shall sign the field
		Signer *ApiSendContentSignatureInfoRequestingSignerSigner `json:"signer,omitempty"`
	} `json:"requesting_signer,omitempty"`

	// SignatureReference Signature Reference
	SignatureReference *string `json:"signature_reference,omitempty"`
}

// ApiSendContentSignatureInfoRequestingSignerSigner Which party shall sign the field
type ApiSendContentSignatureInfoRequestingSignerSigner string

// BasicAccountInfoResponse defines model for BasicAccountInfoResponse.
type BasicAccountInfoResponse struct {
	// CompanyName The company name of the account
	CompanyName *string `json:"company_name,omitempty"`

	// FirstName The first name of the account holder. It contains all first names.
	FirstName *string `json:"first_name,omitempty"`

	// LastName The last name of the account holder
	LastName *string `json:"last_name,omitempty"`

	// MiddleName The middle name of the account holder, usually empty
	MiddleName *string `json:"middle_name,omitempty"`

	// Type The type of the account. private, business
	Type *string `json:"type,omitempty"`
}

// Content defines model for Content.
type Content struct {
	Content     string  `json:"content"`
	ContentType *string `json:"content_type,omitempty"`
}

// ContentCreateResponse defines model for ContentCreateResponse.
type ContentCreateResponse struct {
	Id *string `json:"id,omitempty"`
}

// ContentGetActionsApiResponse defines model for ContentGetActionsApiResponse.
type ContentGetActionsApiResponse struct {
	Payments *struct {
		Details *struct {
			// Amount the amount to pay in the smallest unit of the currency
			Amount *float32 `json:"amount,omitempty"`

			// Currency the currency of the payment
			Currency *string `json:"currency,omitempty"`

			// Iban the iban of the payment
			Iban *string `json:"iban,omitempty"`

			// Market the market of the payment. Important for the payment provider, e.g. Tink
			Market *string `json:"market,omitempty"`

			// Reference the reference of the payment
			Reference *string `json:"reference,omitempty"`

			// TinkPaymentId the payment id in the Tink system
			TinkPaymentId *string `json:"tink_payment_id,omitempty"`
		} `json:"details,omitempty"`
		Link *string `json:"link,omitempty"`
	} `json:"payments,omitempty"`
	Signatures *struct {
		DocumentSignatures *struct {
			// SignatureIds array of signature ids
			SignatureIds       json.RawMessage `json:"signature_ids,omitempty"`
			SignatureReference *string         `json:"signature_reference,omitempty"`
		} `json:"document_signatures,omitempty"`
		EmbeddedSignatures *[]struct {
			CreatedBy           *string `json:"created_by,omitempty"`
			CreatedDate         *string `json:"created_date,omitempty"`
			DocumentSignatureId *string `json:"document_signature_id,omitempty"`
			DueDate             *string `json:"due_date,omitempty"`
			FieldName           *string `json:"field_name,omitempty"`
			History             *string `json:"history,omitempty"`

			// Purpose the purpose why the signature is needed. Important if a document requires multiple signatures from the same signer
			Purpose       *string `json:"purpose,omitempty"`
			RequestDate   *string `json:"request_date,omitempty"`
			RequestedTo   *string `json:"requested_to,omitempty"`
			SignatureDate *string `json:"signature_date,omitempty"`
			SignedBy      *string `json:"signed_by,omitempty"`
			SignedFor     *string `json:"signed_for,omitempty"`
			Value         *string `json:"value,omitempty"`
		} `json:"embedded_signatures,omitempty"`
		SignatureReference *struct {
			DocumentSignatures *string `json:"document_signatures,omitempty"`
			ManagedBy          *string `json:"managed_by,omitempty"`
			SignatureFields    *string `json:"signature_fields,omitempty"`
		} `json:"signature_reference,omitempty"`
	} `json:"signatures,omitempty"`
}

// ContentGetDeliveryCertificateResponse defines model for ContentGetDeliveryCertificateResponse.
type ContentGetDeliveryCertificateResponse struct {
	// Certificate The delivery certificate in XML format.
	Certificate *string `json:"certificate,omitempty"`
	Meta        *struct {
		// DocumentId The ID of the document for which the delivery certificate is requested.
		DocumentId *string `json:"document_id,omitempty"`

		// Id The ID of the delivery certificate.
		Id *string `json:"id,omitempty"`

		// Type The type of the delivery certificate. aes - advanced electronic seal.
		Type *ContentGetDeliveryCertificateResponseMetaType `json:"type,omitempty"`
	} `json:"meta,omitempty"`
}

// ContentGetDeliveryCertificateResponseMetaType The type of the delivery certificate. aes - advanced electronic seal.
type ContentGetDeliveryCertificateResponseMetaType string

// ContentGetResponse defines model for ContentGetResponse.
type ContentGetResponse struct {
	Content *[]Content `json:"content,omitempty"`
	Meta    *Meta      `json:"meta,omitempty"`
}

// CreateSignatureReferenceRequest defines model for CreateSignatureReferenceRequest.
type CreateSignatureReferenceRequest struct {
	// Fields The fields defining the signature reference
	Fields *[]struct {
		// Name The name of the field
		Name string `json:"name"`

		// Purpose The purpose of the field
		Purpose *string `json:"purpose,omitempty"`

		// Role The role of the signer of the field
		Role *string `json:"role,omitempty"`
	} `json:"fields,omitempty"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Code    *float32 `json:"code,omitempty"`
	Message *string  `json:"message,omitempty"`
	Status  *float32 `json:"status,omitempty"`
}

// Item defines model for Item.
type Item struct {
	Delivered     *bool    `json:"delivered,omitempty"`
	DeliveredDate *string  `json:"delivered_date,omitempty"`
	Read          *bool    `json:"read,omitempty"`
	ReadDate      *string  `json:"read_date,omitempty"`
	Receiver      *string  `json:"receiver,omitempty"`
	Sender        *string  `json:"sender,omitempty"`
	SentDate      *string  `json:"sent_date,omitempty"`
	Size          *float32 `json:"size,omitempty"`
	Title         *string  `json:"title,omitempty"`
	Type          *string  `json:"type,omitempty"`
}

// LoginApiKeyRequest defines model for LoginApiKeyRequest.
type LoginApiKeyRequest struct {
	// Key The api key to use for authentication
	Key *string `json:"key,omitempty"`

	// Secret The secret of the api key
	Secret *string `json:"secret,omitempty"`
}

// LoginResponse defines model for LoginResponse.
type LoginResponse struct {
	AccessToken  *string  `json:"access_token,omitempty"`
	CreatedAt    *string  `json:"created_at,omitempty"`
	ExpiresIn    *float32 `json:"expires_in,omitempty"`
	RefreshToken *string  `json:"refresh_token,omitempty"`
	Scope        *string  `json:"scope,omitempty"`
	TokenType    *string  `json:"token_type,omitempty"`
}

// Meta defines model for Meta.
type Meta struct {
	Delivered     *bool   `json:"delivered,omitempty"`
	DeliveredDate *string `json:"delivered_date,omitempty"`
	Read          *bool   `json:"read,omitempty"`
	ReadDate      *string `json:"read_date,omitempty"`
	Receiver      *string `json:"receiver,omitempty"`

	// ReceiverState The state of the receiver, it is only return if the user is the receiver of the message
	ReceiverState *MetaReceiverState `json:"receiver_state,omitempty"`
	Sender        *string            `json:"sender,omitempty"`

	// SenderState The state of the sender, it is only return if the user is the sender of the message
	SenderState *MetaSenderState `json:"sender_state,omitempty"`
	SentDate    *string          `json:"sent_date,omitempty"`
	Size        *float32         `json:"size,omitempty"`
	Subject     *string          `json:"subject,omitempty"`
	Type        *string          `json:"type,omitempty"`
}

// MetaReceiverState The state of the receiver, it is only return if the user is the receiver of the message
type MetaReceiverState string

// MetaSenderState The state of the sender, it is only return if the user is the sender of the message
type MetaSenderState string

// MyMailboxRequest defines model for MyMailboxRequest.
type MyMailboxRequest struct {
	// Filter The filter to apply to the search
	Filter *map[string]interface{} `json:"filter,omitempty"`

	// Page The page number to get
	Page *float32 `json:"page,omitempty"`
}

// MyMailboxResponse defines model for MyMailboxResponse.
type MyMailboxResponse struct {
	Results *[]Item  `json:"results,omitempty"`
	Total   *float32 `json:"total,omitempty"`
}

// MyOutboxRequest defines model for MyOutboxRequest.
type MyOutboxRequest struct {
	// Filter The filter to apply to the search
	Filter *map[string]interface{} `json:"filter,omitempty"`

	// Page The page number to get
	Page *float32 `json:"page,omitempty"`

	// SenderUser The user id or api key of the sender. By default the logged in user is used.
	SenderUser *string `json:"sender_user,omitempty"`
}

// ReceiverExistResponse defines model for ReceiverExistResponse.
type ReceiverExistResponse struct {
	Type *string `json:"type,omitempty"`
}

// RevokeTokenRequest defines model for RevokeTokenRequest.
type RevokeTokenRequest struct {
	// Token The access token to revoke
	Token string `json:"token"`
}

// SignatureReference defines model for SignatureReference.
type SignatureReference struct {
	// DocumentSignatures The document signatures
	DocumentSignatures json.RawMessage `json:"document_signatures,omitempty"`
	Id                 *string         `json:"id,omitempty"`

	// ManagedBy The tenant ID
	ManagedBy *string `json:"managed_by,omitempty"`

	// SignatureFields The fields defining the signature reference
	SignatureFields json.RawMessage `json:"signature_fields,omitempty"`
}

// TenantListResponse defines model for TenantListResponse.
type TenantListResponse struct {
	Tenants *[]TenantResponse `json:"tenants,omitempty"`
	Total   *float32          `json:"total,omitempty"`
}

// TenantResponse defines model for TenantResponse.
type TenantResponse struct {
	AccountId *string `json:"account_id,omitempty"`
	Id        *string `json:"id,omitempty"`
	Image     *string `json:"image,omitempty"`
	Name      *string `json:"name,omitempty"`
	Private   *bool   `json:"private,omitempty"`
}

// WebApiControllerContentControllerGetParams defines parameters for WebApiControllerContentControllerGet.
type WebApiControllerContentControllerGetParams struct {
	// Read Set to true if you want to mark the document as read
	Read *bool `form:"read,omitempty" json:"read,omitempty"`
}

// WebApiControllerSignatureControllerExportSignatureParamsFormat defines parameters for WebApiControllerSignatureControllerExportSignature.
type WebApiControllerSignatureControllerExportSignatureParamsFormat string

// WebApiControllerAuthControllerCreateJSONRequestBody defines body for WebApiControllerAuthControllerCreate for application/json ContentType.
type WebApiControllerAuthControllerCreateJSONRequestBody = LoginApiKeyRequest

// WebApiControllerAuthControllerRevokeJSONRequestBody defines body for WebApiControllerAuthControllerRevoke for application/json ContentType.
type WebApiControllerAuthControllerRevokeJSONRequestBody = RevokeTokenRequest

// WebApiControllerContentControllerCheckReceiverJSONRequestBody defines body for WebApiControllerContentControllerCheckReceiver for application/json ContentType.
type WebApiControllerContentControllerCheckReceiverJSONRequestBody = ApiSendContentReceiverRequest

// WebApiControllerContentControllerSendJSONRequestBody defines body for WebApiControllerContentControllerSend for application/json ContentType.
type WebApiControllerContentControllerSendJSONRequestBody = ApiSendContentSendContentRequest

// WebApiControllerMailboxControllerGetMyInboxJSONRequestBody defines body for WebApiControllerMailboxControllerGetMyInbox for application/json ContentType.
type WebApiControllerMailboxControllerGetMyInboxJSONRequestBody = MyMailboxRequest

// WebApiControllerMailboxControllerGetMyOutboxJSONRequestBody defines body for WebApiControllerMailboxControllerGetMyOutbox for application/json ContentType.
type WebApiControllerMailboxControllerGetMyOutboxJSONRequestBody = MyOutboxRequest

// WebApiControllerSignatureControllerCreateSignatureReferenceJSONRequestBody defines body for WebApiControllerSignatureControllerCreateSignatureReference for application/json ContentType.
type WebApiControllerSignatureControllerCreateSignatureReferenceJSONRequestBody = CreateSignatureReferenceRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// WebApiControllerAccountsControllerGetBasicInfo request
	WebApiControllerAccountsControllerGetBasicInfo(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WebApiControllerAuthControllerCreateWithBody request with any body
	WebApiControllerAuthControllerCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	WebApiControllerAuthControllerCreate(ctx context.Context, body WebApiControllerAuthControllerCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WebApiControllerAuthControllerRevokeWithBody request with any body
	WebApiControllerAuthControllerRevokeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	WebApiControllerAuthControllerRevoke(ctx context.Context, body WebApiControllerAuthControllerRevokeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WebApiControllerContentControllerGet request
	WebApiControllerContentControllerGet(ctx context.Context, id string, params *WebApiControllerContentControllerGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WebApiControllerContentControllerGetActions request
	WebApiControllerContentControllerGetActions(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WebApiControllerContentControllerGetDeliveryCertificate request
	WebApiControllerContentControllerGetDeliveryCertificate(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WebApiControllerContentControllerCheckReceiverWithBody request with any body
	WebApiControllerContentControllerCheckReceiverWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	WebApiControllerContentControllerCheckReceiver(ctx context.Context, body WebApiControllerContentControllerCheckReceiverJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WebApiControllerContentControllerSendWithBody request with any body
	WebApiControllerContentControllerSendWithBody(ctx context.Context, tenant string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	WebApiControllerContentControllerSend(ctx context.Context, tenant string, body WebApiControllerContentControllerSendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WebApiControllerMailboxControllerGetMyInboxWithBody request with any body
	WebApiControllerMailboxControllerGetMyInboxWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	WebApiControllerMailboxControllerGetMyInbox(ctx context.Context, body WebApiControllerMailboxControllerGetMyInboxJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WebApiControllerMailboxControllerGetMyOutboxWithBody request with any body
	WebApiControllerMailboxControllerGetMyOutboxWithBody(ctx context.Context, tenant string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	WebApiControllerMailboxControllerGetMyOutbox(ctx context.Context, tenant string, body WebApiControllerMailboxControllerGetMyOutboxJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WebApiControllerSignatureControllerExportSignature request
	WebApiControllerSignatureControllerExportSignature(ctx context.Context, signatureId string, format WebApiControllerSignatureControllerExportSignatureParamsFormat, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WebApiControllerSignatureControllerCreateSignatureReferenceWithBody request with any body
	WebApiControllerSignatureControllerCreateSignatureReferenceWithBody(ctx context.Context, tenantId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	WebApiControllerSignatureControllerCreateSignatureReference(ctx context.Context, tenantId string, body WebApiControllerSignatureControllerCreateSignatureReferenceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WebApiControllerTenantControllerGetTenant request
	WebApiControllerTenantControllerGetTenant(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WebApiControllerTenantControllerGetOwn request
	WebApiControllerTenantControllerGetOwn(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) WebApiControllerAccountsControllerGetBasicInfo(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWebApiControllerAccountsControllerGetBasicInfoRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WebApiControllerAuthControllerCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWebApiControllerAuthControllerCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WebApiControllerAuthControllerCreate(ctx context.Context, body WebApiControllerAuthControllerCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWebApiControllerAuthControllerCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WebApiControllerAuthControllerRevokeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWebApiControllerAuthControllerRevokeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WebApiControllerAuthControllerRevoke(ctx context.Context, body WebApiControllerAuthControllerRevokeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWebApiControllerAuthControllerRevokeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WebApiControllerContentControllerGet(ctx context.Context, id string, params *WebApiControllerContentControllerGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWebApiControllerContentControllerGetRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WebApiControllerContentControllerGetActions(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWebApiControllerContentControllerGetActionsRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WebApiControllerContentControllerGetDeliveryCertificate(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWebApiControllerContentControllerGetDeliveryCertificateRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WebApiControllerContentControllerCheckReceiverWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWebApiControllerContentControllerCheckReceiverRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WebApiControllerContentControllerCheckReceiver(ctx context.Context, body WebApiControllerContentControllerCheckReceiverJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWebApiControllerContentControllerCheckReceiverRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WebApiControllerContentControllerSendWithBody(ctx context.Context, tenant string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWebApiControllerContentControllerSendRequestWithBody(c.Server, tenant, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WebApiControllerContentControllerSend(ctx context.Context, tenant string, body WebApiControllerContentControllerSendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWebApiControllerContentControllerSendRequest(c.Server, tenant, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WebApiControllerMailboxControllerGetMyInboxWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWebApiControllerMailboxControllerGetMyInboxRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WebApiControllerMailboxControllerGetMyInbox(ctx context.Context, body WebApiControllerMailboxControllerGetMyInboxJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWebApiControllerMailboxControllerGetMyInboxRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WebApiControllerMailboxControllerGetMyOutboxWithBody(ctx context.Context, tenant string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWebApiControllerMailboxControllerGetMyOutboxRequestWithBody(c.Server, tenant, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WebApiControllerMailboxControllerGetMyOutbox(ctx context.Context, tenant string, body WebApiControllerMailboxControllerGetMyOutboxJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWebApiControllerMailboxControllerGetMyOutboxRequest(c.Server, tenant, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WebApiControllerSignatureControllerExportSignature(ctx context.Context, signatureId string, format WebApiControllerSignatureControllerExportSignatureParamsFormat, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWebApiControllerSignatureControllerExportSignatureRequest(c.Server, signatureId, format)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WebApiControllerSignatureControllerCreateSignatureReferenceWithBody(ctx context.Context, tenantId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWebApiControllerSignatureControllerCreateSignatureReferenceRequestWithBody(c.Server, tenantId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WebApiControllerSignatureControllerCreateSignatureReference(ctx context.Context, tenantId string, body WebApiControllerSignatureControllerCreateSignatureReferenceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWebApiControllerSignatureControllerCreateSignatureReferenceRequest(c.Server, tenantId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WebApiControllerTenantControllerGetTenant(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWebApiControllerTenantControllerGetTenantRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WebApiControllerTenantControllerGetOwn(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWebApiControllerTenantControllerGetOwnRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewWebApiControllerAccountsControllerGetBasicInfoRequest generates requests for WebApiControllerAccountsControllerGetBasicInfo
func NewWebApiControllerAccountsControllerGetBasicInfoRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/accounts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewWebApiControllerAuthControllerCreateRequest calls the generic WebApiControllerAuthControllerCreate builder with application/json body
func NewWebApiControllerAuthControllerCreateRequest(server string, body WebApiControllerAuthControllerCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewWebApiControllerAuthControllerCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewWebApiControllerAuthControllerCreateRequestWithBody generates requests for WebApiControllerAuthControllerCreate with any type of body
func NewWebApiControllerAuthControllerCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/auth/login")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewWebApiControllerAuthControllerRevokeRequest calls the generic WebApiControllerAuthControllerRevoke builder with application/json body
func NewWebApiControllerAuthControllerRevokeRequest(server string, body WebApiControllerAuthControllerRevokeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewWebApiControllerAuthControllerRevokeRequestWithBody(server, "application/json", bodyReader)
}

// NewWebApiControllerAuthControllerRevokeRequestWithBody generates requests for WebApiControllerAuthControllerRevoke with any type of body
func NewWebApiControllerAuthControllerRevokeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/auth/logout")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewWebApiControllerContentControllerGetRequest generates requests for WebApiControllerContentControllerGet
func NewWebApiControllerContentControllerGetRequest(server string, id string, params *WebApiControllerContentControllerGetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/content/document/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Read != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "read", runtime.ParamLocationQuery, *params.Read); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewWebApiControllerContentControllerGetActionsRequest generates requests for WebApiControllerContentControllerGetActions
func NewWebApiControllerContentControllerGetActionsRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/content/document/%s/actions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewWebApiControllerContentControllerGetDeliveryCertificateRequest generates requests for WebApiControllerContentControllerGetDeliveryCertificate
func NewWebApiControllerContentControllerGetDeliveryCertificateRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/content/document/%s/delivery_certificate", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewWebApiControllerContentControllerCheckReceiverRequest calls the generic WebApiControllerContentControllerCheckReceiver builder with application/json body
func NewWebApiControllerContentControllerCheckReceiverRequest(server string, body WebApiControllerContentControllerCheckReceiverJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewWebApiControllerContentControllerCheckReceiverRequestWithBody(server, "application/json", bodyReader)
}

// NewWebApiControllerContentControllerCheckReceiverRequestWithBody generates requests for WebApiControllerContentControllerCheckReceiver with any type of body
func NewWebApiControllerContentControllerCheckReceiverRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/content/receiver/check")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewWebApiControllerContentControllerSendRequest calls the generic WebApiControllerContentControllerSend builder with application/json body
func NewWebApiControllerContentControllerSendRequest(server string, tenant string, body WebApiControllerContentControllerSendJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewWebApiControllerContentControllerSendRequestWithBody(server, tenant, "application/json", bodyReader)
}

// NewWebApiControllerContentControllerSendRequestWithBody generates requests for WebApiControllerContentControllerSend with any type of body
func NewWebApiControllerContentControllerSendRequestWithBody(server string, tenant string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tenant", runtime.ParamLocationPath, tenant)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/content/send/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewWebApiControllerMailboxControllerGetMyInboxRequest calls the generic WebApiControllerMailboxControllerGetMyInbox builder with application/json body
func NewWebApiControllerMailboxControllerGetMyInboxRequest(server string, body WebApiControllerMailboxControllerGetMyInboxJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewWebApiControllerMailboxControllerGetMyInboxRequestWithBody(server, "application/json", bodyReader)
}

// NewWebApiControllerMailboxControllerGetMyInboxRequestWithBody generates requests for WebApiControllerMailboxControllerGetMyInbox with any type of body
func NewWebApiControllerMailboxControllerGetMyInboxRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/mailbox/inbox")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewWebApiControllerMailboxControllerGetMyOutboxRequest calls the generic WebApiControllerMailboxControllerGetMyOutbox builder with application/json body
func NewWebApiControllerMailboxControllerGetMyOutboxRequest(server string, tenant string, body WebApiControllerMailboxControllerGetMyOutboxJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewWebApiControllerMailboxControllerGetMyOutboxRequestWithBody(server, tenant, "application/json", bodyReader)
}

// NewWebApiControllerMailboxControllerGetMyOutboxRequestWithBody generates requests for WebApiControllerMailboxControllerGetMyOutbox with any type of body
func NewWebApiControllerMailboxControllerGetMyOutboxRequestWithBody(server string, tenant string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tenant", runtime.ParamLocationPath, tenant)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/mailbox/outbox/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewWebApiControllerSignatureControllerExportSignatureRequest generates requests for WebApiControllerSignatureControllerExportSignature
func NewWebApiControllerSignatureControllerExportSignatureRequest(server string, signatureId string, format WebApiControllerSignatureControllerExportSignatureParamsFormat) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "signature_id", runtime.ParamLocationPath, signatureId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "format", runtime.ParamLocationPath, format)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/signature/%s/export/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewWebApiControllerSignatureControllerCreateSignatureReferenceRequest calls the generic WebApiControllerSignatureControllerCreateSignatureReference builder with application/json body
func NewWebApiControllerSignatureControllerCreateSignatureReferenceRequest(server string, tenantId string, body WebApiControllerSignatureControllerCreateSignatureReferenceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewWebApiControllerSignatureControllerCreateSignatureReferenceRequestWithBody(server, tenantId, "application/json", bodyReader)
}

// NewWebApiControllerSignatureControllerCreateSignatureReferenceRequestWithBody generates requests for WebApiControllerSignatureControllerCreateSignatureReference with any type of body
func NewWebApiControllerSignatureControllerCreateSignatureReferenceRequestWithBody(server string, tenantId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tenant_id", runtime.ParamLocationPath, tenantId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/signature/%s/reference", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewWebApiControllerTenantControllerGetTenantRequest generates requests for WebApiControllerTenantControllerGetTenant
func NewWebApiControllerTenantControllerGetTenantRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/tenants/id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewWebApiControllerTenantControllerGetOwnRequest generates requests for WebApiControllerTenantControllerGetOwn
func NewWebApiControllerTenantControllerGetOwnRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/tenants/my")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// WebApiControllerAccountsControllerGetBasicInfoWithResponse request
	WebApiControllerAccountsControllerGetBasicInfoWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*WebApiControllerAccountsControllerGetBasicInfoResponse, error)

	// WebApiControllerAuthControllerCreateWithBodyWithResponse request with any body
	WebApiControllerAuthControllerCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WebApiControllerAuthControllerCreateResponse, error)

	WebApiControllerAuthControllerCreateWithResponse(ctx context.Context, body WebApiControllerAuthControllerCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*WebApiControllerAuthControllerCreateResponse, error)

	// WebApiControllerAuthControllerRevokeWithBodyWithResponse request with any body
	WebApiControllerAuthControllerRevokeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WebApiControllerAuthControllerRevokeResponse, error)

	WebApiControllerAuthControllerRevokeWithResponse(ctx context.Context, body WebApiControllerAuthControllerRevokeJSONRequestBody, reqEditors ...RequestEditorFn) (*WebApiControllerAuthControllerRevokeResponse, error)

	// WebApiControllerContentControllerGetWithResponse request
	WebApiControllerContentControllerGetWithResponse(ctx context.Context, id string, params *WebApiControllerContentControllerGetParams, reqEditors ...RequestEditorFn) (*WebApiControllerContentControllerGetResponse, error)

	// WebApiControllerContentControllerGetActionsWithResponse request
	WebApiControllerContentControllerGetActionsWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*WebApiControllerContentControllerGetActionsResponse, error)

	// WebApiControllerContentControllerGetDeliveryCertificateWithResponse request
	WebApiControllerContentControllerGetDeliveryCertificateWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*WebApiControllerContentControllerGetDeliveryCertificateResponse, error)

	// WebApiControllerContentControllerCheckReceiverWithBodyWithResponse request with any body
	WebApiControllerContentControllerCheckReceiverWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WebApiControllerContentControllerCheckReceiverResponse, error)

	WebApiControllerContentControllerCheckReceiverWithResponse(ctx context.Context, body WebApiControllerContentControllerCheckReceiverJSONRequestBody, reqEditors ...RequestEditorFn) (*WebApiControllerContentControllerCheckReceiverResponse, error)

	// WebApiControllerContentControllerSendWithBodyWithResponse request with any body
	WebApiControllerContentControllerSendWithBodyWithResponse(ctx context.Context, tenant string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WebApiControllerContentControllerSendResponse, error)

	WebApiControllerContentControllerSendWithResponse(ctx context.Context, tenant string, body WebApiControllerContentControllerSendJSONRequestBody, reqEditors ...RequestEditorFn) (*WebApiControllerContentControllerSendResponse, error)

	// WebApiControllerMailboxControllerGetMyInboxWithBodyWithResponse request with any body
	WebApiControllerMailboxControllerGetMyInboxWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WebApiControllerMailboxControllerGetMyInboxResponse, error)

	WebApiControllerMailboxControllerGetMyInboxWithResponse(ctx context.Context, body WebApiControllerMailboxControllerGetMyInboxJSONRequestBody, reqEditors ...RequestEditorFn) (*WebApiControllerMailboxControllerGetMyInboxResponse, error)

	// WebApiControllerMailboxControllerGetMyOutboxWithBodyWithResponse request with any body
	WebApiControllerMailboxControllerGetMyOutboxWithBodyWithResponse(ctx context.Context, tenant string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WebApiControllerMailboxControllerGetMyOutboxResponse, error)

	WebApiControllerMailboxControllerGetMyOutboxWithResponse(ctx context.Context, tenant string, body WebApiControllerMailboxControllerGetMyOutboxJSONRequestBody, reqEditors ...RequestEditorFn) (*WebApiControllerMailboxControllerGetMyOutboxResponse, error)

	// WebApiControllerSignatureControllerExportSignatureWithResponse request
	WebApiControllerSignatureControllerExportSignatureWithResponse(ctx context.Context, signatureId string, format WebApiControllerSignatureControllerExportSignatureParamsFormat, reqEditors ...RequestEditorFn) (*WebApiControllerSignatureControllerExportSignatureResponse, error)

	// WebApiControllerSignatureControllerCreateSignatureReferenceWithBodyWithResponse request with any body
	WebApiControllerSignatureControllerCreateSignatureReferenceWithBodyWithResponse(ctx context.Context, tenantId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WebApiControllerSignatureControllerCreateSignatureReferenceResponse, error)

	WebApiControllerSignatureControllerCreateSignatureReferenceWithResponse(ctx context.Context, tenantId string, body WebApiControllerSignatureControllerCreateSignatureReferenceJSONRequestBody, reqEditors ...RequestEditorFn) (*WebApiControllerSignatureControllerCreateSignatureReferenceResponse, error)

	// WebApiControllerTenantControllerGetTenantWithResponse request
	WebApiControllerTenantControllerGetTenantWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*WebApiControllerTenantControllerGetTenantResponse, error)

	// WebApiControllerTenantControllerGetOwnWithResponse request
	WebApiControllerTenantControllerGetOwnWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*WebApiControllerTenantControllerGetOwnResponse, error)
}

type WebApiControllerAccountsControllerGetBasicInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BasicAccountInfoResponse
}

// Status returns HTTPResponse.Status
func (r WebApiControllerAccountsControllerGetBasicInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WebApiControllerAccountsControllerGetBasicInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WebApiControllerAuthControllerCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LoginResponse
	JSON401      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r WebApiControllerAuthControllerCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WebApiControllerAuthControllerCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WebApiControllerAuthControllerRevokeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r WebApiControllerAuthControllerRevokeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WebApiControllerAuthControllerRevokeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WebApiControllerContentControllerGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ContentGetResponse
	JSON401      *struct {
		Code    *float32 `json:"code,omitempty"`
		Message *string  `json:"message,omitempty"`
		Status  *float32 `json:"status,omitempty"`
	}
	JSON404 *struct {
		Code    *float32 `json:"code,omitempty"`
		Message *string  `json:"message,omitempty"`
		Status  *float32 `json:"status,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r WebApiControllerContentControllerGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WebApiControllerContentControllerGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WebApiControllerContentControllerGetActionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ContentGetActionsApiResponse
}

// Status returns HTTPResponse.Status
func (r WebApiControllerContentControllerGetActionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WebApiControllerContentControllerGetActionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WebApiControllerContentControllerGetDeliveryCertificateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ContentGetDeliveryCertificateResponse
	JSON404      *struct {
		Code    *float32 `json:"code,omitempty"`
		Message *string  `json:"message,omitempty"`
		Status  *float32 `json:"status,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r WebApiControllerContentControllerGetDeliveryCertificateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WebApiControllerContentControllerGetDeliveryCertificateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WebApiControllerContentControllerCheckReceiverResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ReceiverExistResponse
	JSON404      *struct {
		Code    *float32 `json:"code,omitempty"`
		Message *string  `json:"message,omitempty"`
		Status  *float32 `json:"status,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r WebApiControllerContentControllerCheckReceiverResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WebApiControllerContentControllerCheckReceiverResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WebApiControllerContentControllerSendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ContentCreateResponse
	JSON401      *struct {
		Code    *float32 `json:"code,omitempty"`
		Message *string  `json:"message,omitempty"`
		Status  *float32 `json:"status,omitempty"`
	}
	JSON404 *struct {
		Code    *float32 `json:"code,omitempty"`
		Message *string  `json:"message,omitempty"`
		Status  *float32 `json:"status,omitempty"`
	}
	JSON422 *struct {
		Code    *float32 `json:"code,omitempty"`
		Message *string  `json:"message,omitempty"`
		Status  *float32 `json:"status,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r WebApiControllerContentControllerSendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WebApiControllerContentControllerSendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WebApiControllerMailboxControllerGetMyInboxResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MyMailboxResponse
}

// Status returns HTTPResponse.Status
func (r WebApiControllerMailboxControllerGetMyInboxResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WebApiControllerMailboxControllerGetMyInboxResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WebApiControllerMailboxControllerGetMyOutboxResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MyMailboxResponse
}

// Status returns HTTPResponse.Status
func (r WebApiControllerMailboxControllerGetMyOutboxResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WebApiControllerMailboxControllerGetMyOutboxResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WebApiControllerSignatureControllerExportSignatureResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r WebApiControllerSignatureControllerExportSignatureResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WebApiControllerSignatureControllerExportSignatureResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WebApiControllerSignatureControllerCreateSignatureReferenceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SignatureReference
}

// Status returns HTTPResponse.Status
func (r WebApiControllerSignatureControllerCreateSignatureReferenceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WebApiControllerSignatureControllerCreateSignatureReferenceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WebApiControllerTenantControllerGetTenantResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TenantResponse
}

// Status returns HTTPResponse.Status
func (r WebApiControllerTenantControllerGetTenantResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WebApiControllerTenantControllerGetTenantResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WebApiControllerTenantControllerGetOwnResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TenantListResponse
}

// Status returns HTTPResponse.Status
func (r WebApiControllerTenantControllerGetOwnResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WebApiControllerTenantControllerGetOwnResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// WebApiControllerAccountsControllerGetBasicInfoWithResponse request returning *WebApiControllerAccountsControllerGetBasicInfoResponse
func (c *ClientWithResponses) WebApiControllerAccountsControllerGetBasicInfoWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*WebApiControllerAccountsControllerGetBasicInfoResponse, error) {
	rsp, err := c.WebApiControllerAccountsControllerGetBasicInfo(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWebApiControllerAccountsControllerGetBasicInfoResponse(rsp)
}

// WebApiControllerAuthControllerCreateWithBodyWithResponse request with arbitrary body returning *WebApiControllerAuthControllerCreateResponse
func (c *ClientWithResponses) WebApiControllerAuthControllerCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WebApiControllerAuthControllerCreateResponse, error) {
	rsp, err := c.WebApiControllerAuthControllerCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWebApiControllerAuthControllerCreateResponse(rsp)
}

func (c *ClientWithResponses) WebApiControllerAuthControllerCreateWithResponse(ctx context.Context, body WebApiControllerAuthControllerCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*WebApiControllerAuthControllerCreateResponse, error) {
	rsp, err := c.WebApiControllerAuthControllerCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWebApiControllerAuthControllerCreateResponse(rsp)
}

// WebApiControllerAuthControllerRevokeWithBodyWithResponse request with arbitrary body returning *WebApiControllerAuthControllerRevokeResponse
func (c *ClientWithResponses) WebApiControllerAuthControllerRevokeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WebApiControllerAuthControllerRevokeResponse, error) {
	rsp, err := c.WebApiControllerAuthControllerRevokeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWebApiControllerAuthControllerRevokeResponse(rsp)
}

func (c *ClientWithResponses) WebApiControllerAuthControllerRevokeWithResponse(ctx context.Context, body WebApiControllerAuthControllerRevokeJSONRequestBody, reqEditors ...RequestEditorFn) (*WebApiControllerAuthControllerRevokeResponse, error) {
	rsp, err := c.WebApiControllerAuthControllerRevoke(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWebApiControllerAuthControllerRevokeResponse(rsp)
}

// WebApiControllerContentControllerGetWithResponse request returning *WebApiControllerContentControllerGetResponse
func (c *ClientWithResponses) WebApiControllerContentControllerGetWithResponse(ctx context.Context, id string, params *WebApiControllerContentControllerGetParams, reqEditors ...RequestEditorFn) (*WebApiControllerContentControllerGetResponse, error) {
	rsp, err := c.WebApiControllerContentControllerGet(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWebApiControllerContentControllerGetResponse(rsp)
}

// WebApiControllerContentControllerGetActionsWithResponse request returning *WebApiControllerContentControllerGetActionsResponse
func (c *ClientWithResponses) WebApiControllerContentControllerGetActionsWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*WebApiControllerContentControllerGetActionsResponse, error) {
	rsp, err := c.WebApiControllerContentControllerGetActions(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWebApiControllerContentControllerGetActionsResponse(rsp)
}

// WebApiControllerContentControllerGetDeliveryCertificateWithResponse request returning *WebApiControllerContentControllerGetDeliveryCertificateResponse
func (c *ClientWithResponses) WebApiControllerContentControllerGetDeliveryCertificateWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*WebApiControllerContentControllerGetDeliveryCertificateResponse, error) {
	rsp, err := c.WebApiControllerContentControllerGetDeliveryCertificate(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWebApiControllerContentControllerGetDeliveryCertificateResponse(rsp)
}

// WebApiControllerContentControllerCheckReceiverWithBodyWithResponse request with arbitrary body returning *WebApiControllerContentControllerCheckReceiverResponse
func (c *ClientWithResponses) WebApiControllerContentControllerCheckReceiverWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WebApiControllerContentControllerCheckReceiverResponse, error) {
	rsp, err := c.WebApiControllerContentControllerCheckReceiverWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWebApiControllerContentControllerCheckReceiverResponse(rsp)
}

func (c *ClientWithResponses) WebApiControllerContentControllerCheckReceiverWithResponse(ctx context.Context, body WebApiControllerContentControllerCheckReceiverJSONRequestBody, reqEditors ...RequestEditorFn) (*WebApiControllerContentControllerCheckReceiverResponse, error) {
	rsp, err := c.WebApiControllerContentControllerCheckReceiver(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWebApiControllerContentControllerCheckReceiverResponse(rsp)
}

// WebApiControllerContentControllerSendWithBodyWithResponse request with arbitrary body returning *WebApiControllerContentControllerSendResponse
func (c *ClientWithResponses) WebApiControllerContentControllerSendWithBodyWithResponse(ctx context.Context, tenant string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WebApiControllerContentControllerSendResponse, error) {
	rsp, err := c.WebApiControllerContentControllerSendWithBody(ctx, tenant, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWebApiControllerContentControllerSendResponse(rsp)
}

func (c *ClientWithResponses) WebApiControllerContentControllerSendWithResponse(ctx context.Context, tenant string, body WebApiControllerContentControllerSendJSONRequestBody, reqEditors ...RequestEditorFn) (*WebApiControllerContentControllerSendResponse, error) {
	rsp, err := c.WebApiControllerContentControllerSend(ctx, tenant, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWebApiControllerContentControllerSendResponse(rsp)
}

// WebApiControllerMailboxControllerGetMyInboxWithBodyWithResponse request with arbitrary body returning *WebApiControllerMailboxControllerGetMyInboxResponse
func (c *ClientWithResponses) WebApiControllerMailboxControllerGetMyInboxWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WebApiControllerMailboxControllerGetMyInboxResponse, error) {
	rsp, err := c.WebApiControllerMailboxControllerGetMyInboxWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWebApiControllerMailboxControllerGetMyInboxResponse(rsp)
}

func (c *ClientWithResponses) WebApiControllerMailboxControllerGetMyInboxWithResponse(ctx context.Context, body WebApiControllerMailboxControllerGetMyInboxJSONRequestBody, reqEditors ...RequestEditorFn) (*WebApiControllerMailboxControllerGetMyInboxResponse, error) {
	rsp, err := c.WebApiControllerMailboxControllerGetMyInbox(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWebApiControllerMailboxControllerGetMyInboxResponse(rsp)
}

// WebApiControllerMailboxControllerGetMyOutboxWithBodyWithResponse request with arbitrary body returning *WebApiControllerMailboxControllerGetMyOutboxResponse
func (c *ClientWithResponses) WebApiControllerMailboxControllerGetMyOutboxWithBodyWithResponse(ctx context.Context, tenant string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WebApiControllerMailboxControllerGetMyOutboxResponse, error) {
	rsp, err := c.WebApiControllerMailboxControllerGetMyOutboxWithBody(ctx, tenant, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWebApiControllerMailboxControllerGetMyOutboxResponse(rsp)
}

func (c *ClientWithResponses) WebApiControllerMailboxControllerGetMyOutboxWithResponse(ctx context.Context, tenant string, body WebApiControllerMailboxControllerGetMyOutboxJSONRequestBody, reqEditors ...RequestEditorFn) (*WebApiControllerMailboxControllerGetMyOutboxResponse, error) {
	rsp, err := c.WebApiControllerMailboxControllerGetMyOutbox(ctx, tenant, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWebApiControllerMailboxControllerGetMyOutboxResponse(rsp)
}

// WebApiControllerSignatureControllerExportSignatureWithResponse request returning *WebApiControllerSignatureControllerExportSignatureResponse
func (c *ClientWithResponses) WebApiControllerSignatureControllerExportSignatureWithResponse(ctx context.Context, signatureId string, format WebApiControllerSignatureControllerExportSignatureParamsFormat, reqEditors ...RequestEditorFn) (*WebApiControllerSignatureControllerExportSignatureResponse, error) {
	rsp, err := c.WebApiControllerSignatureControllerExportSignature(ctx, signatureId, format, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWebApiControllerSignatureControllerExportSignatureResponse(rsp)
}

// WebApiControllerSignatureControllerCreateSignatureReferenceWithBodyWithResponse request with arbitrary body returning *WebApiControllerSignatureControllerCreateSignatureReferenceResponse
func (c *ClientWithResponses) WebApiControllerSignatureControllerCreateSignatureReferenceWithBodyWithResponse(ctx context.Context, tenantId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WebApiControllerSignatureControllerCreateSignatureReferenceResponse, error) {
	rsp, err := c.WebApiControllerSignatureControllerCreateSignatureReferenceWithBody(ctx, tenantId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWebApiControllerSignatureControllerCreateSignatureReferenceResponse(rsp)
}

func (c *ClientWithResponses) WebApiControllerSignatureControllerCreateSignatureReferenceWithResponse(ctx context.Context, tenantId string, body WebApiControllerSignatureControllerCreateSignatureReferenceJSONRequestBody, reqEditors ...RequestEditorFn) (*WebApiControllerSignatureControllerCreateSignatureReferenceResponse, error) {
	rsp, err := c.WebApiControllerSignatureControllerCreateSignatureReference(ctx, tenantId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWebApiControllerSignatureControllerCreateSignatureReferenceResponse(rsp)
}

// WebApiControllerTenantControllerGetTenantWithResponse request returning *WebApiControllerTenantControllerGetTenantResponse
func (c *ClientWithResponses) WebApiControllerTenantControllerGetTenantWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*WebApiControllerTenantControllerGetTenantResponse, error) {
	rsp, err := c.WebApiControllerTenantControllerGetTenant(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWebApiControllerTenantControllerGetTenantResponse(rsp)
}

// WebApiControllerTenantControllerGetOwnWithResponse request returning *WebApiControllerTenantControllerGetOwnResponse
func (c *ClientWithResponses) WebApiControllerTenantControllerGetOwnWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*WebApiControllerTenantControllerGetOwnResponse, error) {
	rsp, err := c.WebApiControllerTenantControllerGetOwn(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWebApiControllerTenantControllerGetOwnResponse(rsp)
}

// ParseWebApiControllerAccountsControllerGetBasicInfoResponse parses an HTTP response from a WebApiControllerAccountsControllerGetBasicInfoWithResponse call
func ParseWebApiControllerAccountsControllerGetBasicInfoResponse(rsp *http.Response) (*WebApiControllerAccountsControllerGetBasicInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WebApiControllerAccountsControllerGetBasicInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BasicAccountInfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseWebApiControllerAuthControllerCreateResponse parses an HTTP response from a WebApiControllerAuthControllerCreateWithResponse call
func ParseWebApiControllerAuthControllerCreateResponse(rsp *http.Response) (*WebApiControllerAuthControllerCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WebApiControllerAuthControllerCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LoginResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseWebApiControllerAuthControllerRevokeResponse parses an HTTP response from a WebApiControllerAuthControllerRevokeWithResponse call
func ParseWebApiControllerAuthControllerRevokeResponse(rsp *http.Response) (*WebApiControllerAuthControllerRevokeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WebApiControllerAuthControllerRevokeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseWebApiControllerContentControllerGetResponse parses an HTTP response from a WebApiControllerContentControllerGetWithResponse call
func ParseWebApiControllerContentControllerGetResponse(rsp *http.Response) (*WebApiControllerContentControllerGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WebApiControllerContentControllerGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ContentGetResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Code    *float32 `json:"code,omitempty"`
			Message *string  `json:"message,omitempty"`
			Status  *float32 `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Code    *float32 `json:"code,omitempty"`
			Message *string  `json:"message,omitempty"`
			Status  *float32 `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseWebApiControllerContentControllerGetActionsResponse parses an HTTP response from a WebApiControllerContentControllerGetActionsWithResponse call
func ParseWebApiControllerContentControllerGetActionsResponse(rsp *http.Response) (*WebApiControllerContentControllerGetActionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WebApiControllerContentControllerGetActionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ContentGetActionsApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseWebApiControllerContentControllerGetDeliveryCertificateResponse parses an HTTP response from a WebApiControllerContentControllerGetDeliveryCertificateWithResponse call
func ParseWebApiControllerContentControllerGetDeliveryCertificateResponse(rsp *http.Response) (*WebApiControllerContentControllerGetDeliveryCertificateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WebApiControllerContentControllerGetDeliveryCertificateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ContentGetDeliveryCertificateResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Code    *float32 `json:"code,omitempty"`
			Message *string  `json:"message,omitempty"`
			Status  *float32 `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseWebApiControllerContentControllerCheckReceiverResponse parses an HTTP response from a WebApiControllerContentControllerCheckReceiverWithResponse call
func ParseWebApiControllerContentControllerCheckReceiverResponse(rsp *http.Response) (*WebApiControllerContentControllerCheckReceiverResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WebApiControllerContentControllerCheckReceiverResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ReceiverExistResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Code    *float32 `json:"code,omitempty"`
			Message *string  `json:"message,omitempty"`
			Status  *float32 `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseWebApiControllerContentControllerSendResponse parses an HTTP response from a WebApiControllerContentControllerSendWithResponse call
func ParseWebApiControllerContentControllerSendResponse(rsp *http.Response) (*WebApiControllerContentControllerSendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WebApiControllerContentControllerSendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ContentCreateResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Code    *float32 `json:"code,omitempty"`
			Message *string  `json:"message,omitempty"`
			Status  *float32 `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Code    *float32 `json:"code,omitempty"`
			Message *string  `json:"message,omitempty"`
			Status  *float32 `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			Code    *float32 `json:"code,omitempty"`
			Message *string  `json:"message,omitempty"`
			Status  *float32 `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseWebApiControllerMailboxControllerGetMyInboxResponse parses an HTTP response from a WebApiControllerMailboxControllerGetMyInboxWithResponse call
func ParseWebApiControllerMailboxControllerGetMyInboxResponse(rsp *http.Response) (*WebApiControllerMailboxControllerGetMyInboxResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WebApiControllerMailboxControllerGetMyInboxResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MyMailboxResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseWebApiControllerMailboxControllerGetMyOutboxResponse parses an HTTP response from a WebApiControllerMailboxControllerGetMyOutboxWithResponse call
func ParseWebApiControllerMailboxControllerGetMyOutboxResponse(rsp *http.Response) (*WebApiControllerMailboxControllerGetMyOutboxResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WebApiControllerMailboxControllerGetMyOutboxResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MyMailboxResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseWebApiControllerSignatureControllerExportSignatureResponse parses an HTTP response from a WebApiControllerSignatureControllerExportSignatureWithResponse call
func ParseWebApiControllerSignatureControllerExportSignatureResponse(rsp *http.Response) (*WebApiControllerSignatureControllerExportSignatureResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WebApiControllerSignatureControllerExportSignatureResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseWebApiControllerSignatureControllerCreateSignatureReferenceResponse parses an HTTP response from a WebApiControllerSignatureControllerCreateSignatureReferenceWithResponse call
func ParseWebApiControllerSignatureControllerCreateSignatureReferenceResponse(rsp *http.Response) (*WebApiControllerSignatureControllerCreateSignatureReferenceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WebApiControllerSignatureControllerCreateSignatureReferenceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SignatureReference
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseWebApiControllerTenantControllerGetTenantResponse parses an HTTP response from a WebApiControllerTenantControllerGetTenantWithResponse call
func ParseWebApiControllerTenantControllerGetTenantResponse(rsp *http.Response) (*WebApiControllerTenantControllerGetTenantResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WebApiControllerTenantControllerGetTenantResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TenantResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseWebApiControllerTenantControllerGetOwnResponse parses an HTTP response from a WebApiControllerTenantControllerGetOwnWithResponse call
func ParseWebApiControllerTenantControllerGetOwnResponse(rsp *http.Response) (*WebApiControllerTenantControllerGetOwnResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WebApiControllerTenantControllerGetOwnResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TenantListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
